{"version":3,"sources":["frokost/app.cljs"],"mappings":"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","names":["frokost.app/write-base64","input","goog.crypt.base64/encodeStringUtf8","frokost.app/read-base64","e21555","clojure.edn.read_string","goog.crypt.base64/decodeStringUtf8","js/Error","_","frokost.app/set-localstorage!","key","val","js/window","frokost.app/get-localstorage","frokost.app/get-query-items","js/URL","js/window.location.href","js/frokost","js/frokost.app","js/frokost.app.state","frokost.app/state","reagent.core.atom","or__5002__auto__","temp__5804__auto__","q","saved-items","img","js/Image","frokost.app/copy-to-clipboard","text","js/navigator","frokost.app/get-link","url","search-params","cljs.core/deref","frokost.app/props","p1__21556#","cljs.core.mapv","cljs.core/PersistentHashMap","frokost.app/create-wheel","cljs.core.swap_BANG_","cljs.core/update","cljs.core/constantly","js/module$node_modules$spin_wheel$dist$spin_wheel_esm.Wheel","js/document.getElementById","cljs.core/clj->js","frokost.app/init-wheel","frokost.app/add-item","p1__21557#","cljs.core.sort","cljs.core.remove","cljs.core/nil?","cljs.core/vec","cljs.core.conj","cljs.core/set","frokost.app/remove-item","item","p1__21558#","cljs.core.partial","cljs.core/=","frokost.app/clear-items","cljs.core/assoc","frokost.app/set-items","items","var_args","G__21560","frokost.app/spin-to","index-of","idx","cljs.core._EQ_","cljs.core/rand-int","cljs.core/count","spin-seconds","frokost.app.spin_to","frokost.app/handle-spin","event","cljs.core.println","p1__21561#","p1__21562#","frokost.app/app","iter__5480__auto__","s__21564","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__21566","cljs.core/chunk-buffer","i__21565","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__21563","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","js/frokost.app.react-root","frokost.app/react-root","reagent.dom.client/create-root","frokost.app/init","reagent.core.as_element","js/setTimeout","cljs.core/chunk-first"],"sourcesContent":["(ns frokost.app\n  (:require\n   [clojure.edn :as edn]\n   [goog.crypt.base64 :as b64]\n   [reagent.core :as r]\n   [reagent.dom.client :as dom]\n   [spin-wheel :refer [Wheel]]))\n\n(defn write-base64\n  [input]\n  (b64/encodeStringUtf8 (str input)))\n\n(defn read-base64\n  [input]\n  (try\n    (edn/read-string\n     (b64/decodeStringUtf8 input))\n    (catch js/Error _ nil)))\n\n(defn set-localstorage!\n  [key val]\n  (.setItem (.-localStorage js/window) key val))\n\n(defn get-localstorage\n  [key]\n  (.getItem (.-localStorage js/window) key))\n\n(defn get-query-items\n  []\n  (.get (.-searchParams (js/URL. js/window.location.href)) \"q\"))\n\n(defonce state\n  (r/atom {:items          (or (when-let [q (get-query-items)]\n                                 (read-base64 q))\n                               (when-let [saved-items (get-localstorage \"wheel-items\")]\n                                 (edn/read-string saved-items))\n                               [\"Item 1\" \"Item 2\"])\n           :new-item-input nil\n           :wheel          nil\n           :overlay        (let [img (js/Image.)]\n                             (set! (.-src img) \"./img/overlay.svg\")\n                             img)}))\n\n(defn copy-to-clipboard\n  [text]\n  (.. js/navigator -clipboard (writeText text)))\n\n(defn get-link []\n  (let [url (js/URL. js/window.location.href)\n        search-params (.-searchParams url)]\n    (.set search-params \"q\" (write-base64 (:items @state)))\n    (str (.-origin url) (.-pathname url) \"?\" search-params)))\n\n(defn props\n  []\n  {:items (mapv #(hash-map :label %) (:items @state))\n   :itemBackgroundColors [\"#ffc93c\" \"#66bfbf\" \"#a2d5f2\" \"#515070\" \"#43658b\" \"#ed6663\" \"#d54062\"]\n   :radius 0.84,\n   :itemLabelRadius 0.93,\n   :itemLabelRadiusMax 0.35,\n   :itemLabelRotation 180,\n   :itemLabelAlign \"left\",\n   :itemLabelColors [\"#fff\"],\n   :itemLabelBaselineOffset -0.07,\n   :itemLabelFontSizeMax 55,\n   :rotationSpeedMax 500,\n   :rotationResistance -100,\n   :lineWidth 1,\n   :lineColor \"#fff\"\n   :overlayImage (:overlay @state)})\n\n(defn create-wheel\n  []\n  (swap! state update :wheel (constantly\n                              (Wheel. (js/document.getElementById \"wheel-container\")\n                                      (clj->js (props))))))\n\n(defn init-wheel\n  []\n  (.stop ^Wheel (:wheel @state))\n  (.init ^Wheel (:wheel @state) (clj->js (props)))\n  (set-localstorage! \"wheel-items\" (:items @state)))\n\n(defn add-item\n  []\n  (swap! state update :items #(sort (remove nil? (vec (conj (set %) (:new-item-input @state))))))\n  (swap! state update :new-item-input (constantly nil))\n  (init-wheel))\n\n(defn remove-item\n  [item]\n  (swap! state update :items #(remove (partial = item) %))\n  (init-wheel))\n\n(defn clear-items\n  []\n  (swap! state assoc :items [])\n  (init-wheel))\n\n(defn set-items\n  [items]\n  (swap! state assoc :items items)\n  (init-wheel))\n\n(defn spin-to\n  ([item]\n   (let [index-of (.indexOf (:items @state) item)\n         idx (if (= -1 index-of) (rand-int (count (:items @state))) index-of)\n         spin-seconds 5]\n     (.spinToItem ^Wheel (:wheel @state) idx (* 1000 spin-seconds) true (* 2 spin-seconds))))\n  ([]\n   (spin-to nil)))\n\n(defn handle-spin\n  [event]\n  (println event)\n  (if (.-ctrlKey event)\n    (spin-to \"Kantinen\")\n    (spin-to)))\n\n(defn app\n  []\n  [:div\n   [:div#menu\n    [:div.input-button-wrapper\n     [:input.nice-input {:type \"text\"\n                         :value (:new-item-input @state)\n                         :on-key-down #(when (= (.-key %) \"Enter\") (add-item))\n                         :on-change #(swap! state update :new-item-input (constantly (-> % .-target .-value)))}]\n     [:button.nice-button.green {:on-click #(add-item)} \"Add\"]]\n    [:br]\n    [:ul.nice-list\n     (for [item (:items @state)]\n       ^{:key item}\n       [:li {:on-click #(remove-item item)} item])]\n    [:br]\n    [:button.nice-button.red {:on-click #(clear-items)} \"Clear!\"]\n    (when-let [q (get-query-items)]\n      [:button.nice-button.blue {:on-click #(set-items (read-base64 q))} \"Reset\"])\n    [:button.nice-button.green {:on-click handle-spin} \"Spin!\"]\n    [:br]\n    [:button.small.nice-button.blue {:on-click #(copy-to-clipboard (get-link))} \"Copy link\"]]\n   [:div#wheel-container]])\n\n(defonce react-root\n  (dom/create-root (js/document.getElementById \"app\")))\n\n(defn ^:dev/after-load init\n  []\n  (.render react-root (r/as-element [app]))\n  (js/setTimeout create-wheel 1))\n"]}