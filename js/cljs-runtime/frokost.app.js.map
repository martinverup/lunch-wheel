{"version":3,"sources":["frokost/app.cljs"],"mappings":"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","names":["frokost.app/defaults","frokost.app/set-localstorage!","key","val","js/window","frokost.app/get-localstorage","js/frokost","js/frokost.app","js/frokost.app.state","frokost.app/state","reagent.core.atom","temp__5802__auto__","saved-places","clojure.edn.read_string","img","js/Image","frokost.app/props","p1__20185#","cljs.core.mapv","cljs.core/PersistentHashMap","cljs.core/deref","frokost.app/create-wheel","cljs.core.swap_BANG_","cljs.core/update","cljs.core/constantly","js/module$node_modules$spin_wheel$dist$spin_wheel_esm.Wheel","js/document.getElementById","cljs.core/clj->js","frokost.app/init-wheel","frokost.app/add-place","p1__20186#","cljs.core.sort_by","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/vec","cljs.core.conj","cljs.core/set","frokost.app/remove-place","place","p1__20187#","frokost.app/reset-places","cljs.core/assoc","frokost.app/preset-places","preset","cljs.core.filter","frokost.app/spin-to-random","rand-idx","cljs.core/rand-int","cljs.core/count","spin-seconds","p1__20188#","p1__20189#","frokost.app/app","cljs.core._EQ_","iter__5480__auto__","s__20191","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__20193","cljs.core/chunk-buffer","i__20192","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__20190","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","name","js/frokost.app.react-root","frokost.app/react-root","reagent.dom.client/create-root","frokost.app/init","reagent.core.as_element","js/setTimeout","cljs.core/chunk-first"],"sourcesContent":["(ns frokost.app\n  (:require\n   [clojure.edn :as edn]\n   [reagent.core :as r]\n   [reagent.dom.client :as dom]\n   [spin-wheel :refer [Wheel]]))\n\n(def defaults [{:name     \"Biograf kebab\"\n                :distance :walking}\n               {:name     \"B\u00f8ff\"\n                :distance :walking}\n               {:name     \"Da Basso\"\n                :distance :walking}\n               {:name     \"Det sunde k\u00f8kken\"\n                :distance :walking}\n               {:name     \"Ella\"\n                :distance :walking}\n               {:name     \"Gasoline Grill\"\n                :distance :long-drive}\n               {:name     \"Gem\u00fcse kebab\"\n                :distance :short-drive}\n               {:name     \"Harrys Place\"\n                :distance :walking}\n               {:name     \"Jagger\"\n                :distance :walking}\n               {:name     \"Kantinen\"\n                :distance :walking}\n               {:name     \"Kebab Klubben\"\n                :distance :walking}\n               {:name     \"Kebabistan\"\n                :distance :long-drive}\n               {:name     \"McDonald's\"\n                :distance :short-drive}\n               {:name     \"Olioli\"\n                :distance :walking}\n               {:name     \"Otto\"\n                :distance :walking}\n               {:name     \"Parma & Pasta\"\n                :distance :walking}\n               {:name     \"Ramen to Biiru\"\n                :distance :long-drive}\n               {:name     \"Ritta\"\n                :distance :long-drive}\n               {:name     \"Slagter Broe\"\n                :distance :long-drive}\n               {:name     \"Wedo\"\n                :distance :walking}\n               {:name     \"Wokshop\"\n                :distance :walking}])\n\n(defn set-localstorage!\n  [key val]\n  (.setItem (.-localStorage js/window) key val))\n\n(defn get-localstorage\n  [key]\n  (.getItem (.-localStorage js/window) key))\n\n(defonce state\n  (r/atom {:places          (if-let [saved-places (get-localstorage \"wheel-places\")]\n                              (edn/read-string saved-places)\n                              defaults)\n           :new-place-input nil\n           :wheel           nil\n           :overlay         (let [img (js/Image.)]\n                              (set! (.-src img) \"./img/overlay.svg\")\n                              img)}))\n\n(defn props\n  []\n  {:items (mapv #(hash-map :label (:name %)) (:places @state))\n   :itemBackgroundColors [\"#ffc93c\" \"#66bfbf\" \"#a2d5f2\" \"#515070\" \"#43658b\" \"#ed6663\" \"#d54062\"]\n   :radius 0.84,\n   :itemLabelRadius 0.93,\n   :itemLabelRadiusMax 0.35,\n   :itemLabelRotation 180,\n   :itemLabelAlign \"left\",\n   :itemLabelColors [\"#fff\"],\n   :itemLabelBaselineOffset -0.07,\n   :itemLabelFontSizeMax 55,\n   :rotationSpeedMax 500,\n   :rotationResistance -100,\n   :lineWidth 1,\n   :lineColor \"#fff\"\n   :overlayImage (:overlay @state)})\n\n(defn create-wheel\n  []\n  (swap! state update :wheel (constantly\n                              (Wheel. (js/document.getElementById \"wheel-container\")\n                                      (clj->js (props))))))\n\n(defn init-wheel\n  []\n  (.stop ^Wheel (:wheel @state))\n  (.init ^Wheel (:wheel @state) (clj->js (props)))\n  (set-localstorage! \"wheel-places\" (:places @state)))\n\n(defn add-place\n  []\n  (swap! state update :places #(sort-by :name (remove (comp nil? :name) (vec (conj (set %) {:name (:new-place-input @state)})))))\n  (swap! state update :new-place-input (constantly nil))\n  (init-wheel))\n\n(defn remove-place\n  [place]\n  (swap! state update :places #(remove (comp #{place} :name) %))\n  (init-wheel))\n\n(defn reset-places\n  []\n  (swap! state assoc :places defaults)\n  (init-wheel))\n\n(defn preset-places\n  [preset]\n  (swap! state assoc :places (filter (comp #{preset} :distance) defaults))\n  (init-wheel))\n\n(defn spin-to-random\n  []\n  (let [rand-idx (rand-int (count (:places @state)))\n        spin-seconds 5]\n    (.spinToItem ^Wheel (:wheel @state) rand-idx (* 1000 spin-seconds) true (* 2 spin-seconds))))\n;spinToItem (itemIndex = 0, duration = 0, spinToCenter = true, numberOfRevolutions = 1, direction = 1, easingFunction = null))\n\n(defn app\n  []\n  [:div\n   [:div#menu\n    [:div.input-button-wrapper\n     [:input.nice-input {:type \"text\"\n                         :value (:new-place-input @state)\n                         :on-key-down #(when (= (.-key %) \"Enter\") (add-place))\n                         :on-change #(swap! state update :new-place-input (constantly (-> % .-target .-value)))}]\n     [:button.nice-button {:on-click #(add-place)} \"Add\"]]\n    [:br]\n    [:ul.nice-list\n     (for [place (:places @state)]\n       (let [name (:name place)]\n         ^{:key name}\n         [:li {:on-click #(remove-place name)} name]))]\n    [:br]\n    [:button.nice-button.small {:on-click #(preset-places :walking)} \"Walking distance\"]\n    [:button.nice-button.small {:on-click #(preset-places :short-drive)} \"Short drive\"]\n    [:button.nice-button.small {:on-click #(preset-places :long-drive)} \"Longer drive\"]\n    [:br]\n    [:br]\n    [:button.nice-button {:on-click #(preset-places nil)} \"Clear!\"]\n    [:button.nice-button {:on-click #(reset-places)} \"Reset!\"]\n    [:button.nice-button {:on-click #(spin-to-random)} \"Spin!\"]]\n   [:div#wheel-container]])\n\n(defonce react-root\n  (dom/create-root (js/document.getElementById \"app\")))\n\n(defn ^:dev/after-load init\n  []\n  (.render react-root (r/as-element [app]))\n  (js/setTimeout create-wheel 1))\n"]}