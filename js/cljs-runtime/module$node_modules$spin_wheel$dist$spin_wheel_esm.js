shadow$provide.module$node_modules$spin_wheel$dist$spin_wheel_esm = function(global, require, module, exports) {
  function x(i = 0, e = 0, t = 14) {
    return parseFloat((Math.random() * (e - i) + i).toFixed(t));
  }
  function m(i = 0) {
    return i * Math.PI / 180;
  }
  function W(i = {x:0, y:0}, e, t, s) {
    return R(i.x - e, 2) + R(i.y - t, 2) <= R(s, 2);
  }
  function v(i = {x:0, y:0}, e = {}, t = 1) {
    e = e.getBoundingClientRect();
    return {x:(i.x - e.left) * t, y:(i.y - e.top) * t};
  }
  function X(i = 0, e = 0) {
    i += e;
    let s;
    return 0 < i ? s = i % 360 : s = 360 + i % 360, 360 === s && (s = 0), s;
  }
  function P(i = 0, e = 0) {
    return 180 - X(i, 180 - e);
  }
  function T(i = 0, e = 0, t = 1) {
    e = (i % 360 + e) % 360;
    return e = Y(e), e = (1 === t ? 360 - e : 360 + e) % 360, e *= t, i + e;
  }
  function b(i) {
    return "object" == typeof i && !Array.isArray(i) && null !== i;
  }
  function u(i) {
    return "number" == typeof i && !Number.isNaN(i);
  }
  function l({val:i, isValid:e, errorMessage:t, defaultValue:s, action:n = null}) {
    if (e) {
      return n ? n() : i;
    }
    if (void 0 === i) {
      return s;
    }
    throw Error(t);
  }
  function Y(i = 0) {
    return Number(i.toFixed(9));
  }
  function k(i) {
    return Math.sin(i * Math.PI / 2);
  }
  function z(i = {}, e = {}) {
    if (window.ResizeObserver) {
      let t = new ResizeObserver(() => {
        e({redraw:!0});
      });
      return t.observe(i), {stop:() => {
        t.unobserve(i);
        t.disconnect();
      }};
    }
    return window.addEventListener("resize", e), {stop:() => {
      window.removeEventListener("resize", e);
    }};
  }
  function V(i = {}) {
    $(i);
    i._handler_onResize = z(i._canvasContainer, ({redraw:t = !0}) => {
      i.resize();
      t && i.draw(performance.now());
    });
    let e = () => {
      i._mediaQueryList = window.matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);
      i._mediaQueryList.addEventListener("change", i._handler_onDevicePixelRatioChange, {once:!0});
    };
    i._handler_onDevicePixelRatioChange = () => {
      i.resize();
      e();
    };
    e();
  }
  function F(i = {}) {
    let e = i.canvas;
    "PointerEvent" in window ? (e.removeEventListener("pointerdown", i._handler_onPointerDown), e.removeEventListener("pointermove", i._handler_onPointerMoveRefreshCursor)) : (e.removeEventListener("touchstart", i._handler_onTouchStart), e.removeEventListener("mousedown", i._handler_onMouseDown), e.removeEventListener("mousemove", i._handler_onMouseMoveRefreshCursor));
    i._handler_onResize.stop();
    i._mediaQueryList.removeEventListener("change", i._handler_onDevicePixelRatioChange);
  }
  function $(i = {}) {
    let e = i.canvas;
    i._handler_onPointerMoveRefreshCursor = (t = {}) => {
      i._isCursorOverWheel = i.wheelHitTest({x:t.clientX, y:t.clientY});
      i.refreshCursor();
    };
    i._handler_onMouseMoveRefreshCursor = (t = {}) => {
      i._isCursorOverWheel = i.wheelHitTest({x:t.clientX, y:t.clientY});
      i.refreshCursor();
    };
    i._handler_onPointerDown = (t = {}) => {
      function n(a = {}) {
        a.preventDefault();
        i.dragMove({x:a.clientX, y:a.clientY});
      }
      function r(a = {}) {
        a.preventDefault();
        e.releasePointerCapture(a.pointerId);
        e.removeEventListener("pointermove", n);
        e.removeEventListener("pointerup", r);
        e.removeEventListener("pointercancel", r);
        e.removeEventListener("pointerout", r);
        i.dragEnd();
      }
      let s = {x:t.clientX, y:t.clientY};
      i.isInteractive && i.wheelHitTest(s) && (t.preventDefault(), i.dragStart(s), e.setPointerCapture(t.pointerId), e.addEventListener("pointermove", n), e.addEventListener("pointerup", r), e.addEventListener("pointercancel", r), e.addEventListener("pointerout", r));
    };
    i._handler_onMouseDown = (t = {}) => {
      function n(a = {}) {
        a.preventDefault();
        i.dragMove({x:a.clientX, y:a.clientY});
      }
      function r(a = {}) {
        a.preventDefault();
        document.removeEventListener("mousemove", n);
        document.removeEventListener("mouseup", r);
        i.dragEnd();
      }
      t = {x:t.clientX, y:t.clientY};
      i.isInteractive && i.wheelHitTest(t) && (i.dragStart(t), document.addEventListener("mousemove", n), document.addEventListener("mouseup", r));
    };
    i._handler_onTouchStart = (t = {}) => {
      function n(a = {}) {
        a.preventDefault();
        i.dragMove({x:a.targetTouches[0].clientX, y:a.targetTouches[0].clientY});
      }
      function r(a = {}) {
        a.preventDefault();
        e.removeEventListener("touchmove", n);
        e.removeEventListener("touchend", r);
        e.removeEventListener("touchcancel", r);
        i.dragEnd();
      }
      let s = {x:t.targetTouches[0].clientX, y:t.targetTouches[0].clientY};
      i.isInteractive && i.wheelHitTest(s) && (t.preventDefault(), i.dragStart(s), e.addEventListener("touchmove", n), e.addEventListener("touchend", r), e.addEventListener("touchcancel", r));
    };
    "PointerEvent" in window ? (e.addEventListener("pointerdown", i._handler_onPointerDown), e.addEventListener("pointermove", i._handler_onPointerMoveRefreshCursor)) : (e.addEventListener("touchstart", i._handler_onTouchStart), e.addEventListener("mousedown", i._handler_onMouseDown), e.addEventListener("mousemove", i._handler_onMouseMoveRefreshCursor));
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, Wheel:{enumerable:!0, get:function() {
    return B;
  }}});
  var N = Object.defineProperty, M = Object.getOwnPropertySymbols, j = Object.prototype.hasOwnProperty, H = Object.prototype.propertyIsEnumerable, R = Math.pow, w = (i, e, t) => e in i ? N(i, e, {enumerable:!0, configurable:!0, writable:!0, value:t}) : i[e] = t, L = (i, e) => {
    for (var t in e || (e = {})) {
      j.call(e, t) && w(i, t, e[t]);
    }
    if (M) {
      for (t of M(e)) {
        H.call(e, t) && w(i, t, e[t]);
      }
    }
    return i;
  }, p = Object.freeze({left:"left", right:"right", center:"center"}), o = Object.freeze({wheel:{borderColor:"#000", borderWidth:1, debug:!1, image:null, isInteractive:!0, itemBackgroundColors:["#fff"], itemLabelAlign:p.right, itemLabelBaselineOffset:0, itemLabelColors:["#000"], itemLabelFont:"sans-serif", itemLabelFontSizeMax:500, itemLabelRadius:.85, itemLabelRadiusMax:.2, itemLabelRotation:0, itemLabelStrokeColor:"#fff", itemLabelStrokeWidth:0, items:[], lineColor:"#000", lineWidth:1, pixelRatio:0, 
  radius:.95, rotation:0, rotationResistance:-35, rotationSpeedMax:300, offset:{x:0, y:0}, onCurrentIndexChange:null, onRest:null, onSpin:null, overlayImage:null, pointerAngle:0}, item:{backgroundColor:null, image:null, imageOpacity:1, imageRadius:.5, imageRotation:0, imageScale:1, label:"", labelColor:null, value:null, weight:1}}), c = Object.freeze({pointerLineColor:"#ff00ff", labelBoundingBoxColor:"#ff00ff", labelRadiusColor:"#00ff00", dragPointHue:300}), S = class {
    constructor(e, t = {}) {
      if (!b(e)) {
        throw Error("wheel must be an instance of Wheel");
      }
      if (!b(t) && null !== t) {
        throw Error("props must be an Object or null");
      }
      this._wheel = e;
      for (let s of Object.keys(o.item)) {
        this["_" + s] = o.item[s];
      }
      t ? this.init(t) : this.init(o.item);
    }
    init(e = {}) {
      this.backgroundColor = e.backgroundColor;
      this.image = e.image;
      this.imageOpacity = e.imageOpacity;
      this.imageRadius = e.imageRadius;
      this.imageRotation = e.imageRotation;
      this.imageScale = e.imageScale;
      this.label = e.label;
      this.labelColor = e.labelColor;
      this.value = e.value;
      this.weight = e.weight;
    }
    get backgroundColor() {
      return this._backgroundColor;
    }
    set backgroundColor(e) {
      "string" == typeof e ? this._backgroundColor = e : this._backgroundColor = o.item.backgroundColor;
      this._wheel.refresh();
    }
    get image() {
      return this._image;
    }
    set image(e) {
      e instanceof HTMLImageElement ? this._image = e : this._image = o.item.image;
      this._wheel.refresh();
    }
    get imageOpacity() {
      return this._imageOpacity;
    }
    set imageOpacity(e) {
      "number" == typeof e ? this._imageOpacity = e : this._imageOpacity = o.item.imageOpacity;
      this._wheel.refresh();
    }
    get imageRadius() {
      return this._imageRadius;
    }
    set imageRadius(e) {
      "number" == typeof e ? this._imageRadius = e : this._imageRadius = o.item.imageRadius;
      this._wheel.refresh();
    }
    get imageRotation() {
      return this._imageRotation;
    }
    set imageRotation(e) {
      "number" == typeof e ? this._imageRotation = e : this._imageRotation = o.item.imageRotation;
      this._wheel.refresh();
    }
    get imageScale() {
      return this._imageScale;
    }
    set imageScale(e) {
      "number" == typeof e ? this._imageScale = e : this._imageScale = o.item.imageScale;
      this._wheel.refresh();
    }
    get label() {
      return this._label;
    }
    set label(e) {
      "string" == typeof e ? this._label = e : this._label = o.item.label;
      this._wheel.refresh();
    }
    get labelColor() {
      return this._labelColor;
    }
    set labelColor(e) {
      "string" == typeof e ? this._labelColor = e : this._labelColor = o.item.labelColor;
      this._wheel.refresh();
    }
    get value() {
      return this._value;
    }
    set value(e) {
      void 0 !== e ? this._value = e : this._value = o.item.value;
    }
    get weight() {
      return this._weight;
    }
    set weight(e) {
      "number" == typeof e ? this._weight = e : this._weight = o.item.weight;
    }
    getIndex() {
      let e = this._wheel.items.findIndex(t => t === this);
      if (-1 === e) {
        throw Error("Item not found in parent Wheel");
      }
      return e;
    }
    getCenterAngle() {
      let e = this._wheel.getItemAngles()[this.getIndex()];
      return e.start + (e.end - e.start) / 2;
    }
    getStartAngle() {
      return this._wheel.getItemAngles()[this.getIndex()].start;
    }
    getEndAngle() {
      return this._wheel.getItemAngles()[this.getIndex()].end;
    }
    getRandomAngle() {
      return x(this.getStartAngle(), this.getEndAngle());
    }
  }, B = class {
    constructor(e, t = {}) {
      if (!(e instanceof Element)) {
        throw Error("container must be an instance of Element");
      }
      if (!b(t) && null !== t) {
        throw Error("props must be an Object or null");
      }
      this._frameRequestId = null;
      this._rotationSpeed = 0;
      this._rotationDirection = 1;
      this._lastSpinFrameTime = this._spinToTimeEnd = null;
      this._isCursorOverWheel = !1;
      this.add(e);
      for (let s of Object.keys(o.wheel)) {
        this["_" + s] = o.wheel[s];
      }
      t ? this.init(t) : this.init(o.wheel);
    }
    init(e = {}) {
      this._isInitialising = !0;
      this.borderColor = e.borderColor;
      this.borderWidth = e.borderWidth;
      this.debug = e.debug;
      this.image = e.image;
      this.isInteractive = e.isInteractive;
      this.itemBackgroundColors = e.itemBackgroundColors;
      this.itemLabelAlign = e.itemLabelAlign;
      this.itemLabelBaselineOffset = e.itemLabelBaselineOffset;
      this.itemLabelColors = e.itemLabelColors;
      this.itemLabelFont = e.itemLabelFont;
      this.itemLabelFontSizeMax = e.itemLabelFontSizeMax;
      this.itemLabelRadius = e.itemLabelRadius;
      this.itemLabelRadiusMax = e.itemLabelRadiusMax;
      this.itemLabelRotation = e.itemLabelRotation;
      this.itemLabelStrokeColor = e.itemLabelStrokeColor;
      this.itemLabelStrokeWidth = e.itemLabelStrokeWidth;
      this.items = e.items;
      this.lineColor = e.lineColor;
      this.lineWidth = e.lineWidth;
      this.pixelRatio = e.pixelRatio;
      this.rotationSpeedMax = e.rotationSpeedMax;
      this.radius = e.radius;
      this.rotation = e.rotation;
      this.rotationResistance = e.rotationResistance;
      this.offset = e.offset;
      this.onCurrentIndexChange = e.onCurrentIndexChange;
      this.onRest = e.onRest;
      this.onSpin = e.onSpin;
      this.overlayImage = e.overlayImage;
      this.pointerAngle = e.pointerAngle;
    }
    add(e) {
      this._canvasContainer = e;
      this.canvas = document.createElement("canvas");
      this.canvas.style.display = "block";
      this._context = this.canvas.getContext("2d");
      this._canvasContainer.append(this.canvas);
      V(this);
      !1 === this._isInitialising && this.resize();
    }
    remove() {
      null !== this.canvas && (null !== this._frameRequestId && window.cancelAnimationFrame(this._frameRequestId), F(this), this._canvasContainer.removeChild(this.canvas), this._canvasContainer = null, this.canvas = null, this._context = null);
    }
    resize() {
      if (null !== this.canvas) {
        this.canvas.style.width = this._canvasContainer.clientWidth + "px";
        this.canvas.style.height = this._canvasContainer.clientHeight + "px";
        var [e, t] = [this._canvasContainer.clientWidth * this.getActualPixelRatio(), this._canvasContainer.clientHeight * this.getActualPixelRatio()];
        this.canvas.width = e;
        this.canvas.height = t;
        var s = Math.min(e, t), JSCompiler_object_inline_w_1496 = s - s * this._offset.x;
        s -= s * this._offset.y;
        var r = Math.min(e / JSCompiler_object_inline_w_1496, t / s);
        this._size = Math.max(JSCompiler_object_inline_w_1496 * r, s * r);
        this._center = {x:e / 2 + e * this._offset.x, y:t / 2 + t * this._offset.y};
        this._actualRadius = this._size / 2 * this.radius;
        this._itemLabelFontSize = this._size / 500 * this.itemLabelFontSizeMax;
        this._labelMaxWidth = this._actualRadius * (this.itemLabelRadius - this.itemLabelRadiusMax);
        "center" === this.itemLabelAlign && (this._labelMaxWidth *= 2);
        for (let a of this._items) {
          JSCompiler_object_inline_w_1496 = Math;
          s = JSCompiler_object_inline_w_1496.min;
          r = this._itemLabelFontSize;
          var i = a.label, e$jscomp$0 = this.itemLabelFont;
          var JSCompiler_inline_result = this._labelMaxWidth;
          var s$jscomp$0 = this._context;
          s$jscomp$0.save();
          s$jscomp$0.font = `1px ${e$jscomp$0}`;
          i = s$jscomp$0.measureText(i).width;
          JSCompiler_inline_result = (s$jscomp$0.restore(), JSCompiler_inline_result / i);
          this._itemLabelFontSize = s.call(JSCompiler_object_inline_w_1496, r, JSCompiler_inline_result);
        }
        this.refresh();
      }
    }
    draw(e = 0) {
      if (this._frameRequestId = null, null !== this._context && null !== this.canvas) {
        var t = this._context;
        t.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.animateRotation(e);
        e = this.getItemAngles(this._rotation);
        var n = this.getScaledNumber(this._borderWidth);
        t.textBaseline = "middle";
        t.textAlign = this.itemLabelAlign;
        t.font = this._itemLabelFontSize + "px " + this.itemLabelFont;
        for (let [r, a] of e.entries()) {
          let d = this._items[r], h = new Path2D();
          h.moveTo(this._center.x, this._center.y);
          h.arc(this._center.x, this._center.y, this._actualRadius - n / 2, m(a.start + -90), m(a.end + -90));
          d.path = h;
        }
        this.drawItemBackgrounds(t, e);
        this.drawItemImages(t, e);
        this.drawItemLines(t, e);
        this.drawItemLabels(t, e);
        this.drawBorder(t);
        this.drawImage(t, this._image, !1);
        this.drawImage(t, this._overlayImage, !0);
        this.drawDebugPointerLine(t);
        this._isInitialising = !1;
      }
    }
    drawItemBackgrounds(e, t = []) {
      var s;
      for (let [n] of t.entries()) {
        t = this._items[n], e.fillStyle = null != (s = t.backgroundColor) ? s : this._itemBackgroundColors[n % this._itemBackgroundColors.length], e.fill(t.path);
      }
    }
    drawItemImages(e, t = []) {
      for (let [s, n] of t.entries()) {
        t = this._items[s];
        if (null === t.image) {
          continue;
        }
        e.save();
        e.clip(t.path);
        var a = n.start + (n.end - n.start) / 2;
        e.translate(this._center.x + Math.cos(m(a + -90)) * this._actualRadius * t.imageRadius, this._center.y + Math.sin(m(a + -90)) * this._actualRadius * t.imageRadius);
        e.rotate(m(a + t.imageRotation));
        e.globalAlpha = t.imageOpacity;
        a = this._size / 500 * t.image.width * t.imageScale;
        let h = this._size / 500 * t.image.height * t.imageScale;
        e.drawImage(t.image, -a / 2, -h / 2, a, h);
        e.restore();
      }
    }
    drawImage(e, t, s = !1) {
      if (null !== t) {
        e.translate(this._center.x, this._center.y);
        s || e.rotate(m(this._rotation));
        s = s ? this._size : this._size * this.radius;
        var r = -(s / 2);
        e.drawImage(t, r, r, s, s);
        e.resetTransform();
      }
    }
    drawDebugPointerLine(e) {
      !this.debug || (e.translate(this._center.x, this._center.y), e.rotate(m(this._pointerAngle + -90)), e.beginPath(), e.moveTo(0, 0), e.lineTo(2 * this._actualRadius, 0), e.strokeStyle = c.pointerLineColor, e.lineWidth = this.getScaledNumber(2), e.stroke(), e.resetTransform());
    }
    drawBorder(e) {
      if (!(0 >= this._borderWidth)) {
        var t = this.getScaledNumber(this._borderWidth), s = this._borderColor || "transparent";
        if (e.beginPath(), e.strokeStyle = s, e.lineWidth = t, e.arc(this._center.x, this._center.y, this._actualRadius - t / 2, 0, 2 * Math.PI), e.stroke(), this.debug) {
          t = this.getScaledNumber(1), e.beginPath(), e.strokeStyle = c.labelRadiusColor, e.lineWidth = t, e.arc(this._center.x, this._center.y, this._actualRadius * this.itemLabelRadius, 0, 2 * Math.PI), e.stroke(), e.beginPath(), e.strokeStyle = c.labelRadiusColor, e.lineWidth = t, e.arc(this._center.x, this._center.y, this._actualRadius * this.itemLabelRadiusMax, 0, 2 * Math.PI), e.stroke();
        }
      }
    }
    drawItemLines(e, t = []) {
      if (!(0 >= this._lineWidth)) {
        var s = this.getScaledNumber(this._lineWidth), n = this.getScaledNumber(this._borderWidth);
        e.translate(this._center.x, this._center.y);
        for (let r of t) {
          e.rotate(m(r.start + -90)), e.beginPath(), e.moveTo(0, 0), e.lineTo(this._actualRadius - n, 0), e.strokeStyle = this.lineColor, e.lineWidth = s, e.stroke(), e.rotate(-m(r.start + -90));
        }
        e.resetTransform();
      }
    }
    drawItemLabels(e, t = []) {
      let s = this._itemLabelFontSize * -this.itemLabelBaselineOffset, n = this.getScaledNumber(1), r = this.getScaledNumber(2 * this._itemLabelStrokeWidth);
      for (let [a, d] of t.entries()) {
        t = this._items[a];
        let C = t.labelColor || this._itemLabelColors[a % this._itemLabelColors.length] || "transparent";
        if ("" !== t.label.trim() && "transparent" !== C) {
          e.save();
          e.clip(t.path);
          var _ = d.start + (d.end - d.start) / 2;
          if (e.translate(this._center.x + Math.cos(m(_ + -90)) * this._actualRadius * this.itemLabelRadius, this._center.y + Math.sin(m(_ + -90)) * this._actualRadius * this.itemLabelRadius), e.rotate(m(_ + -90)), e.rotate(m(this.itemLabelRotation)), this.debug) {
            e.save(), _ = 0, "left" === this.itemLabelAlign ? _ = this._labelMaxWidth : "center" === this.itemLabelAlign && (_ = this._labelMaxWidth / 2), e.beginPath(), e.moveTo(_, 0), e.lineTo(-this._labelMaxWidth + _, 0), e.strokeStyle = c.labelBoundingBoxColor, e.lineWidth = n, e.stroke(), e.strokeRect(_, -this._itemLabelFontSize / 2, -this._labelMaxWidth, this._itemLabelFontSize), e.restore();
          }
          if (0 < this._itemLabelStrokeWidth && (e.lineWidth = r, e.strokeStyle = this._itemLabelStrokeColor, e.lineJoin = "round", e.strokeText(t.label, 0, s)), e.fillStyle = C, e.fillText(t.label, 0, s), this.debug) {
            t = this.getScaledNumber(2), e.beginPath(), e.arc(0, 0, t, 0, 2 * Math.PI), e.fillStyle = c.labelRadiusColor, e.fill();
          }
          e.restore();
        }
      }
    }
    drawDebugDragPoints(e) {
      var r;
      if (this.debug && null != (r = this._dragEvents) && r.length) {
        var t = [...this._dragEvents].reverse();
        r = this.getScaledNumber(.5);
        var n = this.getScaledNumber(4);
        for (let [a, d] of t.entries()) {
          t = a / this._dragEvents.length * 100, e.beginPath(), e.arc(d.x, d.y, n, 0, 2 * Math.PI), e.fillStyle = `hsl(${c.dragPointHue},100%,${t}%)`, e.strokeStyle = "#000", e.lineWidth = r, e.fill(), e.stroke();
        }
      }
    }
    animateRotation(e = 0) {
      if (null !== this._spinToTimeEnd) {
        e >= this._spinToTimeEnd ? (this.rotation = this._spinToEndRotation, this._spinToTimeEnd = null, this.raiseEvent_onRest()) : (e = (e - this._spinToTimeStart) / (this._spinToTimeEnd - this._spinToTimeStart), this.rotation = this._spinToStartRotation + (this._spinToEndRotation - this._spinToStartRotation) * this._spinToEasingFunction(0 > e ? 0 : e), this.refresh());
      } else {
        if (null !== this._lastSpinFrameTime) {
          let t = e - this._lastSpinFrameTime;
          0 < t && (this.rotation += t / 1E3 * this._rotationSpeed % 360, this._rotationSpeed = this.getRotationSpeedPlusDrag(t), 0 === this._rotationSpeed ? (this.raiseEvent_onRest(), this._lastSpinFrameTime = null) : this._lastSpinFrameTime = e);
          this.refresh();
        }
      }
    }
    getRotationSpeedPlusDrag(e = 0) {
      e = this._rotationSpeed + e / 1E3 * this.rotationResistance * this._rotationDirection;
      return 1 === this._rotationDirection && 0 > e || -1 === this._rotationDirection && 0 <= e ? 0 : e;
    }
    spin(e = 0) {
      if (!u(e)) {
        throw Error("rotationSpeed must be a number");
      }
      this._dragEvents = [];
      this.beginSpin(e, "spin");
    }
    spinTo(e = 0, t = 0, s = null) {
      if (!u(e)) {
        throw Error("Error: rotation must be a number");
      }
      if (!u(t)) {
        throw Error("Error: duration must be a number");
      }
      this.stop();
      this._dragEvents = [];
      this.animate(e, t, s);
      this.raiseEvent_onSpin({method:"spinto", targetRotation:e, duration:t});
    }
    spinToItem(e = 0, t = 0, s = !0, n = 1, r = 1, a = null) {
      this.stop();
      this._dragEvents = [];
      s = s ? this.items[e].getCenterAngle() : this.items[e].getRandomAngle();
      s = T(this.rotation, s - this._pointerAngle, r);
      s += 360 * n * r;
      this.animate(s, t, a);
      this.raiseEvent_onSpin({method:"spintoitem", targetItemIndex:e, targetRotation:s, duration:t});
    }
    animate(e, t, s) {
      this._spinToStartRotation = this.rotation;
      this._spinToEndRotation = e;
      this._spinToTimeStart = performance.now();
      this._spinToTimeEnd = this._spinToTimeStart + t;
      this._spinToEasingFunction = s || k;
      this.refresh();
    }
    stop() {
      this._spinToTimeEnd = null;
      this._rotationSpeed = 0;
      this._lastSpinFrameTime = null;
    }
    getScaledNumber(e) {
      return e / 500 * this._size;
    }
    getActualPixelRatio() {
      return 0 !== this._pixelRatio ? this._pixelRatio : window.devicePixelRatio;
    }
    wheelHitTest(e = {x:0, y:0}) {
      if (null === this.canvas) {
        return !1;
      }
      e = v(e, this.canvas, this.getActualPixelRatio());
      return W(e, this._center.x, this._center.y, this._actualRadius);
    }
    refreshCursor() {
      if (null !== this.canvas) {
        if (this.isInteractive) {
          if (this.isDragging) {
            this.canvas.style.cursor = "grabbing";
            return;
          }
          if (this._isCursorOverWheel) {
            this.canvas.style.cursor = "grab";
            return;
          }
        }
        this.canvas.style.cursor = "";
      }
    }
    getAngleFromCenter(e = {x:0, y:0}) {
      e = Math.atan2(-(this._center.y - e.y), -(this._center.x - e.x));
      return ((e *= 180 / Math.PI, 0 > e && (e += 360), e) + 90) % 360;
    }
    getCurrentIndex() {
      return this._currentIndex;
    }
    refreshCurrentIndex(e$jscomp$0 = []) {
      0 === this._items.length && (this._currentIndex = -1);
      for (let [t, s] of e$jscomp$0.entries()) {
        e$jscomp$0 = this._pointerAngle;
        var e = s.start % 360, t$jscomp$0 = s.end % 360;
        if (e < t$jscomp$0 ? e <= e$jscomp$0 && e$jscomp$0 < t$jscomp$0 : e <= e$jscomp$0 || e$jscomp$0 < t$jscomp$0) {
          if (this._currentIndex === t) {
            break;
          }
          this._currentIndex = t;
          this._isInitialising || this.raiseEvent_onCurrentIndexChange();
          break;
        }
      }
    }
    getItemAngles(e = 0) {
      var t = 0;
      for (var d$jscomp$0 of this.items) {
        t += d$jscomp$0.weight;
      }
      t = 360 / t;
      d$jscomp$0 = e;
      let a = [];
      for (let d of this._items) {
        e = d.weight * t, a.push({start:d$jscomp$0, end:d$jscomp$0 + e}), d$jscomp$0 += e;
      }
      return 1 < this._items.length && (a[a.length - 1].end = a[0].start + 360), a;
    }
    refresh() {
      null === this._frameRequestId && (this._frameRequestId = window.requestAnimationFrame(e => this.draw(e)));
    }
    limitSpeed(e = 0, t = 0) {
      return Math.max(Math.min(e, t), -t);
    }
    beginSpin(e = 0, t = "") {
      this.stop();
      this._rotationSpeed = this.limitSpeed(e, this._rotationSpeedMax);
      this._lastSpinFrameTime = performance.now();
      this._rotationDirection = 0 <= this._rotationSpeed ? 1 : -1;
      0 !== this._rotationSpeed && this.raiseEvent_onSpin({method:t, rotationSpeed:this._rotationSpeed, rotationResistance:this._rotationResistance});
      this.refresh();
    }
    refreshAriaLabel() {
      null !== this.canvas && (this.canvas.setAttribute("role", "img"), this.canvas.setAttribute("aria-label", "An image of a spinning prize wheel." + (2 <= this.items.length ? ` The wheel has ${this.items.length} slices.` : "")));
    }
    get borderColor() {
      return this._borderColor;
    }
    set borderColor(e) {
      this._borderColor = l({val:e, isValid:"string" == typeof e, errorMessage:"Wheel.borderColor must be a string", defaultValue:o.wheel.borderColor});
      this.refresh();
    }
    get borderWidth() {
      return this._borderWidth;
    }
    set borderWidth(e) {
      this._borderWidth = l({val:e, isValid:u(e), errorMessage:"Wheel.borderWidth must be a number", defaultValue:o.wheel.borderWidth});
      this.refresh();
    }
    get debug() {
      return this._debug;
    }
    set debug(e) {
      this._debug = l({val:e, isValid:"boolean" == typeof e, errorMessage:"Wheel.debug must be a boolean", defaultValue:o.wheel.debug});
      this.refresh();
    }
    get image() {
      return this._image;
    }
    set image(e) {
      this._image = l({val:e, isValid:e instanceof HTMLImageElement || null === e, errorMessage:"Wheel.image must be a HTMLImageElement or null", defaultValue:o.wheel.image});
      this.refresh();
    }
    get isInteractive() {
      return this._isInteractive;
    }
    set isInteractive(e) {
      this._isInteractive = l({val:e, isValid:"boolean" == typeof e, errorMessage:"Wheel.isInteractive must be a boolean", defaultValue:o.wheel.isInteractive});
      this.refreshCursor();
    }
    get itemBackgroundColors() {
      return this._itemBackgroundColors;
    }
    set itemBackgroundColors(e) {
      this._itemBackgroundColors = l({val:e, isValid:Array.isArray(e), errorMessage:"Wheel.itemBackgroundColors must be an array", defaultValue:o.wheel.itemBackgroundColors});
      this.refresh();
    }
    get itemLabelAlign() {
      return this._itemLabelAlign;
    }
    set itemLabelAlign(e) {
      this._itemLabelAlign = l({val:e, isValid:"string" == typeof e && (e === p.left || e === p.right || e === p.center), errorMessage:"Wheel.itemLabelAlign must be one of Constants.AlignText", defaultValue:o.wheel.itemLabelAlign});
      this.resize();
    }
    get itemLabelBaselineOffset() {
      return this._itemLabelBaselineOffset;
    }
    set itemLabelBaselineOffset(e) {
      this._itemLabelBaselineOffset = l({val:e, isValid:u(e), errorMessage:"Wheel.itemLabelBaselineOffset must be a number", defaultValue:o.wheel.itemLabelBaselineOffset});
      this.resize();
    }
    get itemLabelColors() {
      return this._itemLabelColors;
    }
    set itemLabelColors(e) {
      this._itemLabelColors = l({val:e, isValid:Array.isArray(e), errorMessage:"Wheel.itemLabelColors must be an array", defaultValue:o.wheel.itemLabelColors});
      this.refresh();
    }
    get itemLabelFont() {
      return this._itemLabelFont;
    }
    set itemLabelFont(e) {
      this._itemLabelFont = l({val:e, isValid:"string" == typeof e, errorMessage:"Wheel.itemLabelFont must be a string", defaultValue:o.wheel.itemLabelFont});
      this.resize();
    }
    get itemLabelFontSizeMax() {
      return this._itemLabelFontSizeMax;
    }
    set itemLabelFontSizeMax(e) {
      this._itemLabelFontSizeMax = l({val:e, isValid:u(e), errorMessage:"Wheel.itemLabelFontSizeMax must be a number", defaultValue:o.wheel.itemLabelFontSizeMax});
      this.resize();
    }
    get itemLabelRadius() {
      return this._itemLabelRadius;
    }
    set itemLabelRadius(e) {
      this._itemLabelRadius = l({val:e, isValid:u(e), errorMessage:"Wheel.itemLabelRadius must be a number", defaultValue:o.wheel.itemLabelRadius});
      this.resize();
    }
    get itemLabelRadiusMax() {
      return this._itemLabelRadiusMax;
    }
    set itemLabelRadiusMax(e) {
      this._itemLabelRadiusMax = l({val:e, isValid:u(e), errorMessage:"Wheel.itemLabelRadiusMax must be a number", defaultValue:o.wheel.itemLabelRadiusMax});
      this.resize();
    }
    get itemLabelRotation() {
      return this._itemLabelRotation;
    }
    set itemLabelRotation(e) {
      this._itemLabelRotation = l({val:e, isValid:u(e), errorMessage:"Wheel.itemLabelRotation must be a number", defaultValue:o.wheel.itemLabelRotation});
      this.refresh();
    }
    get itemLabelStrokeColor() {
      return this._itemLabelStrokeColor;
    }
    set itemLabelStrokeColor(e) {
      this._itemLabelStrokeColor = l({val:e, isValid:"string" == typeof e, errorMessage:"Wheel.itemLabelStrokeColor must be a string", defaultValue:o.wheel.itemLabelStrokeColor});
      this.refresh();
    }
    get itemLabelStrokeWidth() {
      return this._itemLabelStrokeWidth;
    }
    set itemLabelStrokeWidth(e) {
      this._itemLabelStrokeWidth = l({val:e, isValid:u(e), errorMessage:"Wheel.itemLabelStrokeWidth must be a number", defaultValue:o.wheel.itemLabelStrokeWidth});
      this.refresh();
    }
    get items() {
      return this._items;
    }
    set items(e) {
      this._items = l({val:e, isValid:Array.isArray(e), errorMessage:"Wheel.items must be an array of Items", defaultValue:o.wheel.items, action:() => {
        let t = [];
        for (let s of e) {
          t.push(new S(this, s));
        }
        return t;
      }});
      this.refreshAriaLabel();
      this.refreshCurrentIndex(this.getItemAngles(this._rotation));
      this.resize();
    }
    get lineColor() {
      return this._lineColor;
    }
    set lineColor(e) {
      this._lineColor = l({val:e, isValid:"string" == typeof e, errorMessage:"Wheel.lineColor must be a string", defaultValue:o.wheel.lineColor});
      this.refresh();
    }
    get lineWidth() {
      return this._lineWidth;
    }
    set lineWidth(e) {
      this._lineWidth = l({val:e, isValid:u(e), errorMessage:"Wheel.lineWidth must be a number", defaultValue:o.wheel.lineWidth});
      this.refresh();
    }
    get offset() {
      return this._offset;
    }
    set offset(e) {
      this._offset = l({val:e, isValid:b(e), errorMessage:"Wheel.offset must be an object", defaultValue:o.wheel.offset});
      this.resize();
    }
    get onCurrentIndexChange() {
      return this._onCurrentIndexChange;
    }
    set onCurrentIndexChange(e) {
      this._onCurrentIndexChange = l({val:e, isValid:"function" == typeof e || null === e, errorMessage:"Wheel.onCurrentIndexChange must be a function or null", defaultValue:o.wheel.onCurrentIndexChange});
    }
    get onRest() {
      return this._onRest;
    }
    set onRest(e) {
      this._onRest = l({val:e, isValid:"function" == typeof e || null === e, errorMessage:"Wheel.onRest must be a function or null", defaultValue:o.wheel.onRest});
    }
    get onSpin() {
      return this._onSpin;
    }
    set onSpin(e) {
      this._onSpin = l({val:e, isValid:"function" == typeof e || null === e, errorMessage:"Wheel.onSpin must be a function or null", defaultValue:o.wheel.onSpin});
    }
    get overlayImage() {
      return this._overlayImage;
    }
    set overlayImage(e) {
      this._overlayImage = l({val:e, isValid:e instanceof HTMLImageElement || null === e, errorMessage:"Wheel.overlayImage must be a HTMLImageElement or null", defaultValue:o.wheel.overlayImage});
      this.refresh();
    }
    get pixelRatio() {
      return this._pixelRatio;
    }
    set pixelRatio(e) {
      this._pixelRatio = l({val:e, isValid:u(e), errorMessage:"Wheel.pixelRatio must be a number", defaultValue:o.wheel.pixelRatio});
      this._dragEvents = [];
      this.resize();
    }
    get pointerAngle() {
      return this._pointerAngle;
    }
    set pointerAngle(e) {
      this._pointerAngle = l({val:e, isValid:u(e) && 0 <= e, errorMessage:"Wheel.pointerAngle must be a number between 0 and 360", defaultValue:o.wheel.pointerAngle, action:() => e % 360});
      this.debug && this.refresh();
    }
    get radius() {
      return this._radius;
    }
    set radius(e) {
      this._radius = l({val:e, isValid:u(e), errorMessage:"Wheel.radius must be a number", defaultValue:o.wheel.radius});
      this.resize();
    }
    get rotation() {
      return this._rotation;
    }
    set rotation(e) {
      this._rotation = l({val:e, isValid:u(e), errorMessage:"Wheel.rotation must be a number", defaultValue:o.wheel.rotation});
      this.refreshCurrentIndex(this.getItemAngles(this._rotation));
      this.refresh();
    }
    get rotationResistance() {
      return this._rotationResistance;
    }
    set rotationResistance(e) {
      this._rotationResistance = l({val:e, isValid:u(e), errorMessage:"Wheel.rotationResistance must be a number", defaultValue:o.wheel.rotationResistance});
    }
    get rotationSpeed() {
      return this._rotationSpeed;
    }
    get rotationSpeedMax() {
      return this._rotationSpeedMax;
    }
    set rotationSpeedMax(e) {
      this._rotationSpeedMax = l({val:e, isValid:u(e) && 0 <= e, errorMessage:"Wheel.rotationSpeedMax must be a number \x3e\x3d 0", defaultValue:o.wheel.rotationSpeedMax});
    }
    dragStart(e = {x:0, y:0}) {
      null !== this.canvas && (e = v(e, this.canvas, this.getActualPixelRatio()), this.isDragging = !0, this.stop(), this._dragEvents = [{distance:0, x:e.x, y:e.y, now:performance.now()}], this.refreshCursor());
    }
    dragMove(e = {x:0, y:0}) {
      if (null !== this.canvas) {
        e = v(e, this.canvas, this.getActualPixelRatio());
        var s = this.getAngleFromCenter(e), r = this.getAngleFromCenter(this._dragEvents[0]);
        s = P(r, s);
        this._dragEvents.unshift({distance:s, x:e.x, y:e.y, now:performance.now()});
        this.debug && 40 <= this._dragEvents.length && this._dragEvents.pop();
        this.rotation += s;
      }
    }
    dragEnd() {
      this.isDragging = !1;
      let e = 0, t = performance.now();
      for (let [s, n] of this._dragEvents.entries()) {
        if (this.isDragEventTooOld(t, n)) {
          this._dragEvents.length = s;
          this.debug && this.refresh();
          break;
        } else {
          e += n.distance;
        }
      }
      this.refreshCursor();
      0 !== e && this.beginSpin(4 * e, "interact");
    }
    isDragEventTooOld(e = 0, t = {}) {
      return 250 < e - t.now;
    }
    raiseEvent_onCurrentIndexChange(e = {}) {
      var t;
      null == (t = this.onCurrentIndexChange) || t.call(this, L({type:"currentIndexChange", currentIndex:this._currentIndex}, e));
    }
    raiseEvent_onRest(e = {}) {
      var t;
      null == (t = this.onRest) || t.call(this, L({type:"rest", currentIndex:this._currentIndex, rotation:this._rotation}, e));
    }
    raiseEvent_onSpin(e = {}) {
      var t;
      null == (t = this.onSpin) || t.call(this, L({type:"spin"}, e));
    }
  };
};

//# sourceMappingURL=module$node_modules$spin_wheel$dist$spin_wheel_esm.js.map
